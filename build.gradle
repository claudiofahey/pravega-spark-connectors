/*
 * Copyright (c) 2019 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowGradlePlugin}"
        classpath "org.ajoberstar:gradle-git:${gradleGitPluginVersion}"
    }
}

apply plugin: 'eclipse'
apply from: 'gradle/checkstyle.gradle'
apply from: 'gradle/java.gradle'
apply from: 'gradle/scala.gradle'

apply plugin: 'org.ajoberstar.grgit'

group = "io.pravega"

//version = getProjectVersion()
version = connectorVersion

description = """Pravega Spark Connector"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://repository.apache.org/snapshots" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.jfrog.org/jfrog-dependencies" }
}

configurations {
    shadowOnly {
    }
}

dependencies {
    compile(group: 'io.pravega', name: 'pravega-client', version: pravegaVersion) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'org.projectlombok', module: 'lombok'
    }

    compile group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
    compile group: 'org.scala-lang', name: 'scala-reflect', version: scalaVersion
    compile group: 'org.scala-lang', name: 'scala-compiler', version: scalaVersion
    compile group: 'org.scala-lang.modules', name: 'scala-java8-compat_'+scalaCompatabilityVersion, version: scalaJava8CompatVersion
    compile group: 'com.jsuereth', name: 'scala-arm_'+scalaCompatabilityVersion, version: scalaArmVersion

    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_'+scalaCompatabilityVersion, version: jacksonModule

    /*
    compile group: 'org.apache.spark', name: 'spark-core_'+scalaCompatabilityVersion, version: sparkVersion
    //https://stackoverflow.com/questions/36427291/illegalaccesserror-to-guavas-stopwatch-from-org-apache-hadoop-mapreduce-lib-inp
    compile('org.apache.hadoop:hadoop-mapreduce-client-core:2.7.2') {force = true}
    compile('org.apache.hadoop:hadoop-common:2.7.2') {force = true} // required for org.apache.hadoop.util.StopWatch  
    compile('commons-io:commons-io:2.4') {force = true} // required for org.apache.commons.io.Charsets that is used internally
    */

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile(group: 'io.pravega', name: 'pravega-standalone', version: pravegaVersion) {
        exclude group: 'com.sun.jersey', module: 'jersey-core'
    }
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
    testCompile group: 'org.apache.spark', name: 'spark-sql_'+scalaCompatabilityVersion, version: sparkVersion

    compileOnly group: 'org.apache.spark', name: 'spark-sql_'+scalaCompatabilityVersion, version: sparkVersion

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    shadowOnly group: 'ch.qos.logback', name: 'logback-classic', version: logbackClassicVersion
    shadowOnly group: 'org.apache.spark', name: 'spark-sql_'+scalaCompatabilityVersion, version: sparkVersion
}

configurations {
    shadowOnly {
    }
}

test {
    dependsOn 'cleanTest'
}

shadowJar {
    classifier = null
    version = version
    zip64 = true
    mergeServiceFiles()

    relocate 'io.netty', 'io.pravega.shaded.io.netty'
    relocate 'com.google', 'io.pravega.shaded.com.google'
}

javadoc {
    title = "Pravega Spark Connector"
    failOnError = false
    exclude "**/impl/**";
}

def getProjectVersion() {
    String ver = connectorVersion
    if (ver.contains("-SNAPSHOT")) {
        String versionLabel = ver.substring(0, ver.indexOf("-SNAPSHOT"))
        def count = grgit.log(includes:['HEAD']).size()
        def commitId = "${grgit.head().abbreviatedId}"
        ver = versionLabel + "-" + count + "." + commitId + "-SNAPSHOT"
    }
    return ver
}
